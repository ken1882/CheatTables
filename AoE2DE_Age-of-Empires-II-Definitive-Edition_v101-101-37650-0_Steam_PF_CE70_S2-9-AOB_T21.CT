<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="29">
  <CheatEntries>
    <CheatEntry>
      <ID>23</ID>
      <Description>"[X] &lt;== Age of Empires Definitive II Edition v101.101.37650.0Steam Script v2.9 AOB"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Age of Empires II Definitive Edition
 Game Version  : 101.101.37650.0
 Game Sponsor  : PF
 Process Name  : AoE2DE_s.exe
 Relevant Info : 64bits/RTS
 Script Version: 2.9 - AOB
 CE Version    : 7.0
 Release date  : 28-May-2020
 Author        : Recifense
 History:
 15-Nov-2019: First Release (Adapted from AoEDE) (s2.0)
 17-Nov-2019: Fix for GM + "No Conversion" (s2.1)
 18-Dec-2019: Release for version 101.101.34055.0 (s2.2)
 21-Jan-2020: Release for version 101.101.34699.0 (s2.3)
 27-Jan-2020: Release for version 101.101.34793.0 (s2.4)
 11-Feb-2020: Fix for "No Conversion" (s2.5)
 29-Feb-2020: Release for version 101.101.35584.0 (s2.6)
 31-Mar-2020: Release for version 101.101.36202.0 (s2.7)
 30-Apr-2020: Release for version 101.101.36906.0 (s2.8)
 28-May-2020: Release for version 101.101.37650.0 (s2.9)
 Features:
 - Minimum Resources
 - God Mode
 - Instant Research
 - Instant Construction
 - Instant unit Production
 - No Conversion (new)
 - Some Pointers
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 7.0) then
    ShowMessage('Warning. CE version should be 7.0 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (string.upper(process) ~= string.upper("AoE2DE_s.exe")) then
    ShowMessage('Warning. Expected Process = AoE2DE_s.exe')
  end
{$asm}

//=========================================
{$lua}
--  monoAA_USEMONO(process,false)
  if waitForPDB then --this way older CE versions are unaffected (By Dark Byte)
    waitForPDB()
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"AoE2DE_s.exe")
{
define(MOHP,AoE2DE_s.exe+00C1FC99) //#==##==
define(MOSU,AoE2DE_s.exe+00C8F978) //#==##=#
define(GDMD,AoE2DE_s.exe+00855AB0) //=#=##=#
define(GMD2,AoE2DE_s.exe+00E2B46D) //##===##
define(GMD3,AoE2DE_s.exe+00E1D5BA) //###==##
define(MOEP,AoE2DE_s.exe+00D8BE8D) //===X##=
define(MOCP,AoE2DE_s.exe+00E1C62D) //=#====#
define(MOPP,AoE2DE_s.exe+006D5FBF) //=======
define(MOUC,AoE2DE_s.exe+006CADF0) //N####=#
define(MORP,AoE2DE_s.exe+006DD079) //-----N#
}
//=========================================
// Constants used in the script (that can be changed)
define(ctCE70,(float)7.0)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(MOHP,$process,49 8B 47 70 8B 08 89 4B 1C 49 8B 47 70 8B 48 04 89 4B 18 49 8B 47 70)
AOBScanModule(MOSU,$process,48 89 BB D0 01 00 00 C6 87 96 00 00 00 01 85 F6 ?? ?? 80 BF A8 00 00) //
AOBScanModule(GDMD,$process,F3 0F 11 8F 90 00 00 00 48 85 ED 0F 84 ?? ?? 00 00 E8 ?? ?? ?? ?? 80 3D) //
AOBScanModule(GMD2,$process,F3 0F 11 8F 90 00 00 00 48 8B 47 18 83 B8 A8 93 00 00 00 0F 8E ?? ??) //
AOBScanModule(GMD3,$process,F3 44 0F 11 8F 90 00 00 00 48 8B 47 18 8B 88 A8 93 00 00 85 C9 0F 8E) //
AOBScanModule(MOEP,$process,F3 43 0F 10 04 C3 66 0F 6E C8 0F 5B C9 F3 0F 58 CA 0F 2F C1 ?? ?? 45 84 C9)
AOBScanModule(MOCP,$process,0F 5B C0 0F 2F C8 ?? ?? 48 8B 07 B2 02 48 8B CF FF 90 D0 00 00 00 B0) //
AOBScanModule(MOPP,$process,0f 5b c0 0f 2f f0 ?? ?? 48 8b cb e8 ?? ?? ?? ?? 84 c0 ?? ?? 32 db ??)
AOBScanModule(MOUC,$process,48 8B C4 55 57 41 54 41 56 41 57 48 8D A8 28 FB FF FF 48 81 EC B0 05 00 00) //
AOBScanModule(MORP,$process,F3 0F 10 47 70 0F 2F C1 ?? ?? 66 44 39 5C CA 12 ?? ?? 48 8B 07 B2 01) //

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_MonSelUnit)
label(_BackMSU)
label(_GodMode)
label(_BackGMD)
label(_GodMode2)
label(_BackGM2)
label(_GodMode3)
label(_BackGM3)
label(_MonEraProgress)
label(_BackMEP)
label(_MonConstProg)
label(_BackMCP)
label(_MonProdProg)
label(_BackMPP)
label(_MonUnitConv)
label(_BackMUC)
label(_MonResProg)
label(_BackMRP)

label(iEnableMMR)
label(iEnableGMD)
label(iEnableMEP)
label(iEnableMCP)
label(iEnableMPP)
label(iEnableMUC)

label(iPlayerID)
label(pPlayer)
label(pUnit)
label(pEra)
label(aLast)
label(iCount)
label(iCount2)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMMR)
registersymbol(iEnableGMD)
registersymbol(iEnableMEP)
registersymbol(iEnableMCP)
registersymbol(iEnableMPP)
registersymbol(iEnableMUC)
registersymbol(iPlayerID)
registersymbol(pPlayer)
registersymbol(pUnit)
registersymbol(pEra)
registersymbol(aLast)
registersymbol(iCount)
registersymbol(iCount2)

registersymbol(MOHP)
registersymbol(MOSU)
registersymbol(GDMD)
registersymbol(GMD2)
registersymbol(GMD3)
registersymbol(MOEP)
registersymbol(MOCP)
registersymbol(MOPP)
registersymbol(MOUC)
registersymbol(MORP)

//=========================================
MyCode:
//========================================= 36202 *
// All the time (Id player and min Resources)
_MonHumanPlayer:
 mov [aLast],'_MHP'

 xchg r14,r15

 cmp [pPlayer],r14
 je _MonHP00

 mov [pPlayer],r14

 inc dword ptr [iCount]

_MonHP00:
 mov ax,[r14+0000011A]
 movsx rax,ax
 mov [iPlayerID],eax

 cmp dword ptr [iEnableMMR],0
 je _ExitMHP                       // Jump if feature is disabled

 mov rax,[r14+70]

 movsd [pXMM0],xmm0

 movss xmm0,[rax+00]
 maxss xmm0,[fMinRes]
 movss [rax+00],xmm0
 movss xmm0,[rax+04]
 maxss xmm0,[fMinRes]
 movss [rax+04],xmm0
 movss xmm0,[rax+08]
 maxss xmm0,[fMinRes]
 movss [rax+08],xmm0
 movss xmm0,[rax+0c]
 maxss xmm0,[fMinRes2]
 movss [rax+0c],xmm0

 movsd xmm0,[pXMM0]

_ExitMHP:
 xchg r14,r15

 mov rax,[r15+70]                  // Original code (get pRes)
 mov ecx,[rax]                     // Original code (get 1st Res)
 jmp _BackMHP                      // Back to main code

//========================================= 37650 *
// When a unit is selected
_MonSelUnit:
 mov [pUnit],rdi

_ExitMSU:
 mov [rbx+000001D0],rdi            // Original code (set pUnit)
 jmp _BackMSU                      // Back to main code

//========================================= 37650 #
// During Combat (units and buildings)
_GodMode:
 mov [aLast],'_GMD'

 mov [pRSI],rsi

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov rsi,[rdi+18]
 cmp rsi,[pPlayer]
 jne _ExitGMD

 mov rsi,[rdi+10]
 test rsi,rsi
 jz _ExitGMD

 cmp word ptr [rsi+4a],#15
 jle _ExitGMD

 maxss xmm1,[rdi+00000090]

_ExitGMD:
 mov rsi,[pRSI]

 movss [rdi+00000090],xmm1         // Original code (upd HP)
 jmp _BackGMD                      // Back to main code

//========================================= 37650 #
// During Combat (units)
_GodMode2:
 mov [aLast],'_GM2'

 mov [pRBX],rbx

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 mov rbx,[rdi+18]
 cmp rbx,[pPlayer]
 jne _ExitGM2

 mov rbx,[rdi+10]
 test rbx,rbx
 jz _ExitGM2

 cmp word ptr [rbx+4a],#15
 jle _ExitGM2

 maxss xmm1,[rdi+00000090]

_ExitGM2:
 mov rbx,[pRBX]

 movss [rdi+00000090],xmm1         // Original code (upd HP)
 jmp _BackGM2                      // Back to main code

//========================================= 37650 #
// During Combat (buildings)
_GodMode3:
 mov [aLast],'_GM3'

 mov [pRDI],rsi

 cmp dword ptr [iEnableGMD],0
 je _ExitGM3                       // Jump if feature is disabled

 mov rsi,[rdi+18]
 cmp rsi,[pPlayer]
 jne _ExitGM3

 maxss xmm9,[rdi+00000090]

_ExitGM3:
 mov rsi,[pRDI]

 movss [rdi+00000090],xmm9         // Original code (upd HP)
 jmp _BackGM3                      // Back to main code

//========================================= v36906 *
// When changing ERA is in progress
_MonEraProgress:
 mov [aLast],'_MEP'

 mov [pRBX],rbx

 movss xmm0,[r11+r8*8]             // Original code (get prog)
 movd xmm1,eax                     // Original code
 cvtdq2ps xmm1,xmm1                // Original code
 addss xmm1,xmm2                   // Original code

 cmp dword ptr [iEnableMEP],0
 je _ExitMEP                       // Jump if feature is disabled

 mov rbx,[r10+18]
 cmp rbx,[pPlayer]
 jne _ExitMEP

 mov [pEra],r10

 maxss xmm0,xmm1
 movss [r11+r8*8],xmm0

_ExitMEP:
 mov rbx,[pRBX]

 comiss xmm0,xmm1                  // Original code (chk if finished)
 jmp _BackMEP                      // Back to main code

//========================================= 37650 #
// When Constructing
_MonConstProg:
 mov [aLast],'_MCP'

 mov [pRDX],rdx

 cvtdq2ps xmm0,xmm0                // Original code

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 mov rdx,[rdi+18]
 cmp rdx,[pPlayer]
 jne _ExitMCP

 movss [rdi+00000090],xmm2
 movss [rdi+000003F0],xmm0
 movss xmm1,xmm0

_ExitMCP:
 mov rdx,[pRDX]

 comiss xmm1,xmm0                  // Original code (chk if finished)
 jmp _BackMCP                      // Back to main code

//========================================= v35584 ok
// When Constructing
_MonProdProg:
 mov [aLast],'_MPP'

 mov [pRCX],rcx

 cvtdq2ps xmm0,xmm0                // Original code

 cmp dword ptr [iEnableMPP],0
 je _ExitMPP                       // Jump if feature is disabled

 mov rcx,[rbx+10]
 test rcx,rcx
 jz _ExitMPP

 mov rcx,[rcx+18]
 cmp rcx,[pPlayer]
 jne _ExitMPP

 movss [rbx+6c],xmm0
 movss xmm6,xmm0

_ExitMPP:
 mov rcx,[pRCX]

 comiss xmm6,xmm0                  // Original code (chk if finished)
 jmp _BackMPP                      // Back to main code

//========================================= 37650 *
// When Converting
_MonUnitConv:
 mov [aLast],'_MUC'

 cmp dword ptr [iEnableMUC],0
 je _ExitMUC                       // Jump if feature is disabled

 mov eax,[rcx+30]
 test eax,eax
 js _ExitMUC

 mov rax,[rcx+20]
 test rax,rax
 jz _ExitMUC

 mov rax,[rax+18]
 cmp rax,[pPlayer]
 jne _ExitMUC

 inc dword ptr [iCount2]

 mov al,01
 ret
//--
_ExitMUC:
 mov rax,rsp                       // Original code
 push rbp                          // Original code
 push rdi                          // Original code
 push r12                          // Original code
 jmp _BackMUC                      // Back to main code

//========================================= 37650 #
// When research prog is updated
_MonResProg:
 mov [aLast],'_MRP'

 cmp dword ptr [iEnableMEP],0
 je _ExitMRP                       // Jump if feature is disabled

 cmp r9,[pPlayer]
 jne _ExitMRP

 movss xmm0,[rdi+70]
 maxss xmm0,xmm1
 movss [rdi+70],xmm0

_ExitMRP:
 movss xmm0,[rdi+70]               // Original code (get prog)
 comiss xmm0,xmm1                  // Original code
 jmp _BackMRP                      // Back to main code

//=========================================
align 10,'='
//=========================================
 db '===============================&gt;'
 db 'CE7.0 Script by Recifense 200528'
//=========================================
// Variables
iEnableMMR:
 dd 0
iEnableGMD:
 dd 0
iEnableMEP:
 dd 0
iEnableMCP:
 dd 0
iEnableMPP:
 dd 0
iEnableMUC:
 dd 0
iPlayerID:
 dd 55555555
fMinRes:
 dd (float)2700.0
fMinRes2:
 dd (float)27000.0
fMinERA:
 dd (float)0.98
pPlayer:
 dq MyCode
pUnit:
 dq 0
pEra:
 dq 0
pRAX:
 dq 0
pRBX:
 dq 0
pRCX:
 dq 0
pRDX:
 dq 0
pRDI:
 dq 0
pRSI:
 dq 0
pXMM1:
 dq 0
pXMM0:
 dq 0
iCount:
 dq 0
iCount2:
 dq 0
aLast:
 db 'CE70'

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
 nop
_BackMHP:

MOSU:
 jmp _MonSelUnit
 nop
 nop
_BackMSU:

GDMD:
 jmp _GodMode
 nop
 nop
 nop
_BackGMD:

GMD2:
 jmp _GodMode2
 nop
 nop
 nop
_BackGM2:

GMD3:
 jmp _GodMode3
 nop
 nop
 nop
 nop
_BackGM3:

MOEP:
 jmp _MonEraProgress
 db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
_BackMEP:

MOCP:
 jmp _MonConstProg
 nop
_BackMCP:

MOPP:
 jmp _MonProdProg
 nop
_BackMPP:

MOUC:
 jmp _MonUnitConv
 nop
 nop
_BackMUC:

MORP:
 jmp _MonResProg
 nop
 nop
 nop
_BackMRP:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov rax,[r15+70]
// mov ecx,[rax]
 db 49 8B 47 70 8B 08

MOSU:
// mov [rbx+000001D0],rdi
 db 48 89 BB D0 01 00 00

GDMD:
// movss [rdi+00000090],xmm1
 db F3 0F 11 8F 90 00 00 00

GMD2:
// movss [rdi+00000090],xmm1
 db F3 0F 11 8F 90 00 00 00

GMD3:
// movss [rdi+00000090],xmm9
 db f3 44 0f 11 8f 90 00 00 00

MOEP:
// movss xmm0,[r11+r8*8]
// movd xmm1,eax
// cvtdq2ps xmm1,xmm1
// addss xmm1,xmm2
// comiss xmm0,xmm1
 db F3 43 0F 10 04 C3 66 0F 6E C8 0F 5B C9 F3 0F 58 CA 0F 2F C1

MOCP:
// cvtdq2ps xmm0,xmm0
// comiss xmm1,xmm0
 db 0f 5b c0 0f 2f c8

MOPP:
// cvtdq2ps xmm0,xmm0
// comiss xmm6,xmm0
 db 0f 5b c0 0f 2f f0

MOUC:
// mov rax,rsp
// push rbp
// push rdi
// push r12
 db 48 8B C4 55 57 41 54

MORP:
// movss xmm0,[rdi+70]
// comiss xmm0,xmm1
 db F3 0F 10 47 70 0F 2F C1

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMMR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMEP)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMUC)
unregistersymbol(iPlayerID)
unregistersymbol(pPlayer)
unregistersymbol(pUnit)
unregistersymbol(pEra)
unregistersymbol(aLast)
unregistersymbol(iCount)
unregistersymbol(iCount2)

unregistersymbol(MOHP)
unregistersymbol(MOSU)
unregistersymbol(GDMD)
unregistersymbol(GMD2)
unregistersymbol(GMD3)
unregistersymbol(MOEP)
unregistersymbol(MOCP)
unregistersymbol(MOPP)
unregistersymbol(MOUC)
unregistersymbol(MORP)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== Minimum Resources"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$LUA}
writeInteger("iEnableMMR",1)
memrec.Color=0x0004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMR",0)
memrec.Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== God Mode"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$LUA}
writeInteger("iEnableGMD",1)
memrec.Color=0x0004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
memrec.Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>235</ID>
          <Description>"[X] &lt;== Instant Research"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$LUA}
writeInteger("iEnableMEP",1)
memrec.Color=0x0004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMEP",0)
memrec.Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>233</ID>
          <Description>"[X] &lt;== Instant Construction"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$LUA}
writeInteger("iEnableMCP",1)
memrec.Color=0x0004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
memrec.Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>231</ID>
          <Description>"[X] &lt;== Instant Production"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$LUA}
writeInteger("iEnableMPP",1)
memrec.Color=0x0004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
memrec.Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>248</ID>
          <Description>"[X] &lt;== No  Coversion (Units/Buildings)"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$LUA}
writeInteger("iEnableMUC",1)
memrec.Color=0x0004000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUC",0)
memrec.Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20200528</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Age of Empires II Definitive Edition
 Game Version  : 101.101.37650.0
 Game Sponsor  : PF
 Process Name  : AoE2DE_s.exe
 Relevant Info : 64bits/RTS
 Script Version: 2.9 - AOB
 CE Version    : 7.0
 Release date  : 28-May-2020
 Author        : Recifense
 History:
 15-Nov-2019: First Release (Adapted from AoEDE) (s2.0)
 17-Nov-2019: Fix for GM + "No Conversion" (s2.1)
 18-Dec-2019: Release for version 101.101.34055.0 (s2.2)
 21-Jan-2020: Release for version 101.101.34699.0 (s2.3)
 27-Jan-2020: Release for version 101.101.34793.0 (s2.4)
 11-Feb-2020: Fix for "No Conversion" (s2.5)
 29-Feb-2020: Release for version 101.101.35584.0 (s2.6)
 31-Mar-2020: Release for version 101.101.36202.0 (s2.7)
 30-Apr-2020: Release for version 101.101.36906.0 (s2.8)
 28-May-2020: Release for version 101.101.37650.0 (s2.9)
 Features:
 - Minimum Resources           [1]
 - God Mode                    [2]
 - Instant Research            [3]
 - Instant Construction        [4]
 - Instant unit Production     [5]
 - No Conversion               [6] (new)(s2.1) 
 - Some Pointers
===========================================
[1] Minimum Value is 2670 (resource will not go under this vale)[HPO];
[2] Units will not die and the Buildings will not be destroyed [HPO];
[3] Resarch in 1 click [HPO];
[4] Construction as soon as it starts [HPO];
[5] Production in 1 click [HPO];
[6] Units/Buildings will not be converted [HPO];
[HPO] = Human Player Only
===========================================
[USAGE]
1) Run CE70 or greater;
2) Run Game;
3) Load the game process "AoE2DE_s.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
- None defined;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
