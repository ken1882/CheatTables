<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Perk Level"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ForTheQueen.exe
  Version: 
  Date   : 2024-03-24
  Author : Compeador

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJ_PERK,GameAssembly.dll,8B 44 C1 30 48 83 C4 20 5F C3 E8 95) // should be unique
alloc(newmem,$1000,INJ_PERK)

label(code)
label(return)
label(pt_perk)

newmem:
  push rbx
  lea rbx,[rcx+rax*8+30]
  mov [pt_perk],rbx
  pop rbx
  jmp code

pt_perk:
  dq 0
registersymbol(pt_perk)

code:
  mov eax,[rcx+rax*8+30]
  add rsp,20
  jmp return

INJ_PERK:
  jmp newmem
  nop 3
return:
registersymbol(INJ_PERK)

[DISABLE]

INJ_PERK:
  db 8B 44 C1 30 48 83 C4 20

unregistersymbol(pt_perk)
unregistersymbol(INJ_PERK)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+9C8B0C

GameAssembly.dll+9C8AF1: 5F              - pop rdi
GameAssembly.dll+9C8AF2: C3              - ret 
GameAssembly.dll+9C8AF3: 48 8B 4F 18     - mov rcx,[rdi+18]
GameAssembly.dll+9C8AF7: 48 85 C9        - test rcx,rcx
GameAssembly.dll+9C8AFA: 74 1A           - je GameAssembly.dll+9C8B16
GameAssembly.dll+9C8AFC: 48 98           - cdqe 
GameAssembly.dll+9C8AFE: 3B 41 18        - cmp eax,[rcx+18]
GameAssembly.dll+9C8B01: 73 19           - jae GameAssembly.dll+9C8B1C
GameAssembly.dll+9C8B03: 48 8B 5C 24 30  - mov rbx,[rsp+30]
GameAssembly.dll+9C8B08: 48 8D 04 40     - lea rax,[rax+rax*2]
// ---------- INJECTING HERE ----------
GameAssembly.dll+9C8B0C: 8B 44 C1 30     - mov eax,[rcx+rax*8+30]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+9C8B10: 48 83 C4 20     - add rsp,20
GameAssembly.dll+9C8B14: 5F              - pop rdi
GameAssembly.dll+9C8B15: C3              - ret 
GameAssembly.dll+9C8B16: E8 95 72 81 FF  - call GameAssembly.il2cpp_method_get_class+90
GameAssembly.dll+9C8B1B: CC              - int 3 
GameAssembly.dll+9C8B1C: E8 7F 72 81 FF  - call GameAssembly.il2cpp_method_get_class+80
GameAssembly.dll+9C8B21: CC              - int 3 
GameAssembly.dll+9C8B22: CC              - int 3 
GameAssembly.dll+9C8B23: CC              - int 3 
GameAssembly.dll+9C8B24: CC              - int 3 
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"No description"</Description>
          <LastState Value="2" RealAddress="1583B134B90"/>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pt_perk</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Coin"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ForTheQueen.exe
  Version: 
  Date   : 2024-03-24
  Author : Compeador

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJ_COIN,GameAssembly.dll,8B 51 54 48 8B 48 40 4C 8B 40 28 FF 50 18 45) // should be unique
alloc(newmem,$1000,INJ_COIN)

label(code)
label(return)
label(pt_coin)

newmem:
  push rbx
  lea rbx,[rcx+54]
  mov [pt_coin],rbx
  pop rbx
  jmp code

pt_coin:
  dq 0
registersymbol(pt_coin)

code:
  mov edx,[rcx+54]
  mov rcx,[rax+40]
  jmp return

INJ_COIN:
  jmp newmem
  nop 2
return:
registersymbol(INJ_COIN)

[DISABLE]

INJ_COIN:
  db 8B 51 54 48 8B 48 40

unregistersymbol(pt_coin)
unregistersymbol(INJ_COIN)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+4F6F1E

GameAssembly.dll+4F6EFD: 6B C2 32        - imul eax,edx,32
GameAssembly.dll+4F6F00: 83 C0 32        - add eax,32
GameAssembly.dll+4F6F03: 66 0F 6E C0     - movd xmm0,eax
GameAssembly.dll+4F6F07: 0F 5B C0        - cvtdq2ps xmm0,xmm0
GameAssembly.dll+4F6F0A: F3 0F 59 C1     - mulss xmm0,xmm1
GameAssembly.dll+4F6F0E: F3 0F 2C C0     - cvttss2si eax,xmm0
GameAssembly.dll+4F6F12: 01 41 54        - add [rcx+54],eax
GameAssembly.dll+4F6F15: 48 8B 41 30     - mov rax,[rcx+30]
GameAssembly.dll+4F6F19: 48 85 C0        - test rax,rax
GameAssembly.dll+4F6F1C: 74 0E           - je GameAssembly.dll+4F6F2C
// ---------- INJECTING HERE ----------
GameAssembly.dll+4F6F1E: 8B 51 54        - mov edx,[rcx+54]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+4F6F21: 48 8B 48 40     - mov rcx,[rax+40]
GameAssembly.dll+4F6F25: 4C 8B 40 28     - mov r8,[rax+28]
GameAssembly.dll+4F6F29: FF 50 18        - call qword ptr [rax+18]
GameAssembly.dll+4F6F2C: 45 33 C0        - xor r8d,r8d
GameAssembly.dll+4F6F2F: 33 D2           - xor edx,edx
GameAssembly.dll+4F6F31: 48 8B CB        - mov rcx,rbx
GameAssembly.dll+4F6F34: 48 8B 5C 24 40  - mov rbx,[rsp+40]
GameAssembly.dll+4F6F39: 48 83 C4 30     - add rsp,30
GameAssembly.dll+4F6F3D: 5F              - pop rdi
GameAssembly.dll+4F6F3E: E9 5D 05 00 00  - jmp GameAssembly.dll+4F74A0
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"No description"</Description>
          <LastState Value="660" RealAddress="156CC0E6984"/>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pt_coin</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Quick Leveling"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ForTheQueen.exe
  Version: 
  Date   : 2024-03-24
  Author : Compeador

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJ_XP,GameAssembly.dll,01 47 58 E8 0E E1 FF FF) // should be unique
alloc(newmem,$1000,INJ_XP)

label(code)
label(return)

newmem:
  add eax,eax
  add eax,eax
  add eax,eax
  add eax,eax
  add eax,eax
  add eax,eax
code:
  add [rdi+58],eax
  call GameAssembly.dll+4F4F70
  jmp return

INJ_XP:
  jmp newmem
  nop 3
return:
registersymbol(INJ_XP)

[DISABLE]

INJ_XP:
  db 01 47 58 E8 0E E1 FF FF

unregistersymbol(INJ_XP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+4F6E5A

GameAssembly.dll+4F6E3A: 0F 84 03 01 00 00  - je GameAssembly.dll+4F6F43
GameAssembly.dll+4F6E40: B8 AB AA AA 2A     - mov eax,2AAAAAAB
GameAssembly.dll+4F6E45: F7 69 40           - imul [rcx+40]
GameAssembly.dll+4F6E48: 48 8B CF           - mov rcx,rdi
GameAssembly.dll+4F6E4B: 8B C2              - mov eax,edx
GameAssembly.dll+4F6E4D: C1 E8 1F           - shr eax,1F
GameAssembly.dll+4F6E50: 03 D0              - add edx,eax
GameAssembly.dll+4F6E52: 6B C2 2D           - imul eax,edx,2D
GameAssembly.dll+4F6E55: 33 D2              - xor edx,edx
GameAssembly.dll+4F6E57: 83 C0 2D           - add eax,2D
// ---------- INJECTING HERE ----------
GameAssembly.dll+4F6E5A: 01 47 58           - add [rdi+58],eax
// ---------- DONE INJECTING  ----------
GameAssembly.dll+4F6E5D: E8 0E E1 FF FF     - call GameAssembly.dll+4F4F70
GameAssembly.dll+4F6E62: 48 8B 57 20        - mov rdx,[rdi+20]
GameAssembly.dll+4F6E66: 48 85 D2           - test rdx,rdx
GameAssembly.dll+4F6E69: 74 27              - je GameAssembly.dll+4F6E92
GameAssembly.dll+4F6E6B: 66 0F 6E 4F 58     - movd xmm1,[rdi+58]
GameAssembly.dll+4F6E70: 66 0F 6E 57 5C     - movd xmm2,[rdi+5C]
GameAssembly.dll+4F6E75: 48 8B 42 28        - mov rax,[rdx+28]
GameAssembly.dll+4F6E79: 48 8B 4A 40        - mov rcx,[rdx+40]
GameAssembly.dll+4F6E7D: 0F 5B C9           - cvtdq2ps xmm1,xmm1
GameAssembly.dll+4F6E80: 48 89 44 24 20     - mov [rsp+20],rax
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Info about this table:
</Comments>
</CheatTable>
